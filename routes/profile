const express = require('express');
const jwt = require('jsonwebtoken');
const CryptoJS = require('crypto-js');
const { Pool } = require('pg');
const axios = require('axios');
const { compareSync, hash } = require('bcryptjs');
require('dotenv').config();
const { v4: uuidv4 } = require('uuid');
const API_KEY_CODE = process.env.API_KEY_CODE;
const SECRET_KEY = process.env.SECRET_KEY;
const PREFIX = process.env.PREFIX;
const captchaSecretKey = process.env.CAPTCHA_SECRET_KEY_TEST;
const profileRouter = express.Router();

const config = require('../config.json');

const pool = new Pool(config.db);

const app = express();
app.use(express.json());
app.use('/profile', profileRouter);

const validateApiKey = async (req, res, next) => {
    const apiKey = req.header('x-api-key');

    const sourceApiKeys = await pool.query('SELECT "Id" FROM "' + PREFIX + 'POAPIKeys" WHERE "Code" = $1', [API_KEY_CODE])
    const sourceApiKey = sourceApiKeys.rows[0].Id;

    if (apiKey && apiKey === sourceApiKey) {
        next();
    } else {
        return res.status(401).json({ message: 'Yetkisiz erişim: API anahtarı hatalı.' });
    }
};

const authMiddleware = (req, res, next) => {
    const token = req.headers['x-access-token'];  // Token'i istek başlığından al

    if (!token) {
        return res.status(403).json({ message: 'Session token gönderilmedi.' });
    }

    // Token'i doğrula
    jwt.verify(token, SECRET_KEY, (err, decoded) => {
        if (err) {
            return res.status(401).json({ message: 'Session token doğrulanamadı.' });
        }

        // Token geçerli ise decoded verisini req.user'a ekleyerek sonraki aşamaya geç
        req.user = decoded;
        next();
    });
};

profileRouter.use((req, res, next) => {

    // "/submit" rotası için middleware'i atla
    if (req.path === "/submit-captcha") return next();
    validateApiKey(req, res, next);
});

// Profilde ana bilgileri görüntüleme
profileRouter.get('/', authMiddleware, async (req, res) => {
    const customerId = req.user?.customerId;

    try {
        const result = await pool.query(`SELECT 
            "Name", 
            "Surname", 
            "EmailAddress", 
            "PhoneNumber",
            "EmailVerificationStatus", 
            "PhoneVerificationStatus" 
            FROM "` + PREFIX + `Customers" 
            WHERE "Id" = $1`, [customerId]);
        const user = result.rows[0];

        if (result.rows.length == 0) {
            return res.status(404).json({ message: 'Kullanıcı bulunamadı.' });
        }

        const profileData = {
            name: user.Name,
            surname: user.Surname,
            email: user.EmailAddress,
            phoneNumber: user.PhoneNumber,
            avatar: null
        };

        const twoFactorSettings = {
            email: user.EmailVerificationStatus,
            sms: user.PhoneVerificationStatus
        };

        const resultBankAddresses = await pool.query(`SELECT 
            bd."BankName" AS "bankName", 
            ba."IBAN" AS "iban", 
            bd."Icon" AS "icon", 
            ba."CreatedAt" AS "createdAt" 
            FROM "` + PREFIX + `CustomerBankAccounts"  ba 
            LEFT JOIN "` + PREFIX + `POBanks" bd ON bd."Id" = ba."BankId" 
            WHERE ba."CustomerId" = $1`, [customerId]);
        var bankAddresses = resultBankAddresses.rows;

        const resultWalletAddresses = await pool.query(`SELECT 
            w."Address" AS "walletAdress", 
            w."ChainType" AS "chainName", 
            w."StartDate" AS "createdAt",
            w."Currency" AS "assetType", 
            c."Icon" AS "icon"
            FROM "` + PREFIX + `CustomerWallets"  w 
            LEFT JOIN "` + PREFIX + `POCoins" c ON c."Name" = w."Currency" 
            WHERE w."CustomerId" = $1`, [customerId]);

        var walletAddresses = resultWalletAddresses.rows;

        return res.status(200).json({ profileData, twoFactorSettings, bankAddresses, walletAddresses });
    } catch (err) {
        return res.status(500).json({ message: 'Profil yüklenemedi.', error: err.message });
    }
});

// Şifre değiştirme 
profileRouter.post('/change-password', authMiddleware, async (req, res) => {
    const { oldPassword, newPassword, confirmNewPassword } = req.body;
    const customerId = req.user?.customerId;
    try {

        // Token doğrulama ve kullanıcıyı bulma
        const result = await pool.query('SELECT "HashedPassword" FROM "' + PREFIX + 'Customers"  WHERE "Id" = $1 ', [customerId]);

        const passwordLog = result.rows[0];
        const passwordRegex = /^(?=.*[a-zçğıöşü])(?=.*[A-ZÇĞİÖŞÜ])(?=.*[@$!%*?&.,;:])[A-Za-zçÇğĞıİöÖşŞüÜ\d@$!%*?&.,;:]{8,}$/;
        const hashedPassword = CryptoJS.SHA256(newPassword).toString(CryptoJS.enc.Hex);
        const hashedOldPassword = CryptoJS.SHA256(oldPassword).toString(CryptoJS.enc.Hex);
        console.log(hashedOldPassword + '---' + passwordLog.HashedPassword)

        if (!newPassword || !passwordRegex.test(newPassword)) {
            console.log({ message: 'Şifrenizi geçerli formatta giriniz.' });
            return res.status(400).json({ message: 'Şifrenizi geçerli formatta giriniz.' });
        }

        if (newPassword != confirmNewPassword) {
            console.log({ message: 'Şifreler eşleşmiyor.' });
            return res.status(400).json({ message: 'Şifreler eşleşmiyor.' });
        }

        if (hashedOldPassword != passwordLog.HashedPassword) {
            console.log({ message: 'Şifreniz yanlış!' });
            return res.status(400).json({ message: 'Şifreniz yanlış!' });
        }

        if (newPassword == oldPassword) {
            console.log({ message: 'Şifreniz önceki şifreniz ile aynı olamaz.' });
            return res.status(400).json({ message: 'Şifreniz önceki şifreniz ile aynı olamaz.' });
        }

        var id = uuidv4();
        var updateTime = new Date();
        var updateType = "Profile";

        try {

            const response = await axios.post('http://emakin-web.tokenization.svc.cluster.local:80/rest/v1/initiateByProcess', {
                apiKey: "4a73969d-c4d1-4908-9a3d-6b080b2e05fe",
                logonId: "support@bt.guru",
                logonProvider: "Organization",
                process: "c45309be-a1f7-4ef9-bf81-c695772911cc",
                task: "b5b7697a-2e5d-49ae-bdcf-f9e16345ec3c",
                version: null,
                data: `<ProfilePasswordResetManagement>
                            <CustomerId>${customerId}</CustomerId>
                            <HashedPassword>${hashedPassword}</HashedPassword>
                            <IPAddress>${req.ip}</IPAddress>
                        </ProfilePasswordResetManagement>`,
                culture: null
            });

            return res.status(200).json({ message: 'Şifreniz başarılı şekilde sıfırlandı.' });
        } catch (error) {

            console.log({ message: 'Şifre sıfırlama hatası!', error: error.message, IP: req.ip });
            return res.status(500).json({ message: 'Şifre sıfırlama hatası!', error: error.message });
        }

    } catch (error) {
        console.log({ message: 'Şifre sıfırlama hatası!', error: error.message, IP: req.ip });
        return res.status(500).json({ message: 'Şifre sıfırlama hatası!', error: error.message });
    }

});

// Banka hesaplarını listeleme
profileRouter.post('/add-wallets', authMiddleware, async (req, res) => {
    const { walletAddress } = req.body;
    const customerId = req.user?.customerId;

    try {

        try {
            const response = await axios.post('http://emakin-web.tokenization.svc.cluster.local:80/rest/v1/initiateByProcess', {
                apiKey: "4a73969d-c4d1-4908-9a3d-6b080b2e05fe",
                logonId: "support@bt.guru",
                logonProvider: "Organization",
                process: "c45309be-a1f7-4ef9-bf81-c695772911cc",
                task: "f0a03ccf-b313-4a6c-b23b-117e37ebe571",
                version: null,
                data: `<CustomerWalletsManagement>
                            <CustomerId>${customerId}</CustomerId>
                            <WalletAddress>${walletAddress}</WalletAddress>
                        </CustomerWalletsManagement>`,
                culture: null
            });

        } catch (error) {
            return res.status(500).json({ message: 'Cüzdanlar eklenemedi! (initiate error)', hata: error.response.data });
        }

        return res.status(201).json({ message: 'Cüzdanlarınız başarılı şekilde eklendi.' });

    } catch (error) {
        return res.status(500).json({ message: 'Cüzdanlar eklenemedi!', hata: error.message });
    }

});

// Yeni banka hesabı ekleme
profileRouter.post('/add-bank-account', authMiddleware, async (req, res) => {
    const { iban } = req.body;
    const customerId = req.user?.customerId;
    const ibanPattern = /^[A-Z]{2}\d{2}[A-Z0-9]{1,30}$/;

    const countryCode = iban.slice(0, 2);
    const bankCode = iban.slice(6, 9); // Banka kodu 6-9 arası karakterler 
    console.log(bankCode);

    try {

        const bankResult = await pool.query('SELECT * FROM "' + PREFIX + 'POBanks" WHERE "BankCode" = $1', [bankCode]);
        const bankDefinition = bankResult.rows[0];
        var bankId = null;

        const cbaResult = await pool.query('SELECT * FROM "' + PREFIX + 'CustomerBankAccounts" WHERE "CustomerId"= $1 AND "IBAN" = $2 AND "Active" = $3', [customerId, iban, true]);

        if (bankResult.rowCount != 0) {
            bankId = bankDefinition.Id;
        }

        if (cbaResult.rowCount > 0) {
            return res.status(400).json({ message: 'Bu IBAN daha önce eklenmiş!' });
        }

        if (!iban || !ibanPattern.test(iban) || countryCode != "TR" || iban.length != 26) {
            return res.status(400).json({ message: 'IBAN geçersiz!' });
        }

        try {
            const response = await axios.post('http://emakin-web.tokenization.svc.cluster.local:80/rest/v1/initiateByProcess', {
                apiKey: "4a73969d-c4d1-4908-9a3d-6b080b2e05fe",
                logonId: "support@bt.guru",
                logonProvider: "Organization",
                process: "c45309be-a1f7-4ef9-bf81-c695772911cc",
                task: "a4245aa9-e0d8-41c9-a3e7-e76d82513ad3",
                version: null,
                data: `<BankAccountsManagement>
                        <CustomerId>${customerId}</CustomerId>
                        <IBAN>${iban}</IBAN>
                      </BankAccountsManagement>`,
                culture: null
            });

        } catch (error) {
            return res.status(500).json({ message: 'Banka hesabı eklenemedi! (initiate error)', hata: error.response.data });
        }

        return res.status(201).json({ message: 'Banka hesabınız başarılı şekilde eklendi.' });
    } catch (error) {
        return res.status(500).json({ message: 'Banka hesabı eklenemedi!', hata: error.message });
    }
});


// Profile router'ı dışa aktar
module.exports = profileRouter;